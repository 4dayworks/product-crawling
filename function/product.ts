import axios from "axios";
import { NODE_API_URL } from "./common";
import { l } from "./console";
import { getCoupangStoreListV2 } from "./coupang/getCoupangStoreListV2";
import { getIherbStoreList } from "./getIherbStoreList";
import { getItemscoutStoreListV2 } from "./getItemscoutStoreListV2";
import { getNaverCatalogStoreListV2 } from "./getNaverCatalogStoreListV2";
import { getAllProductIdType } from "./product_price_update";
import { StoreType } from "./updateByItemscout";

export const setGraph = async (product: getAllProductIdType) => {
  try {
    await axios.post(`${NODE_API_URL}/v2/product/daily_price/history`, {
      product_id: product.product_id,
    });
    // l("Sub", "blue", "complete - product_price write history");
  } catch (error) {
    l("Sub Err", "red", "failed - product_price write history");
  }
};

export const setLastMonthLowPrice = async (product: getAllProductIdType) => {
  try {
    await axios.patch(`${NODE_API_URL}/product/price/low_price`, {
      product_id: product.product_id,
    });
    // l("Sub", "blue", "complete - low price of month was written");
  } catch (error) {
    l("Sub Err", "red", "failed - low price of month was written");
  }
};
export const shuffle = (array: getAllProductIdType[]) => {
  array.sort(() => Math.random() - 0.5);
};

export const exceptionCompanyListAtNaver = () =>
  axios.get(`${NODE_API_URL}/crawling/blacklist`).then((res) => res.data.data);

export const getNotificationItemscoutList = () => {
  return axios
    .get(`${NODE_API_URL}/crawling/product/notification/itemscout`)
    .then((res) => res.data.data.map((item: { product_id: string }) => item.product_id))
    .catch((error) => {
      l("[Notification Itemscout error]", "yellow");
      return [];
    });
};

export const getHolyZoneId = (): Promise<number[]> =>
  axios(`${NODE_API_URL}/crawling/product/holyzone/all`)
    .then((d) => {
      const data: { product_id: number; product_name: string }[] = d.data.data;
      return data.map((p) => p.product_id);
    })
    .catch((e) => {
      l("Noti Err", "red", "성지존 알림 오류 /crawling/product/holyzone/all" + e.code);
      return [];
    });

export const getStoreList = async (product: getAllProductIdType) => {
  try {
    const crawlingType = product.type;
    if (crawlingType === "itemscout") {
      const [coupangStoreList, iherbStoreData, itemscoutStoreList] = await Promise.all([
        getCoupangStoreListV2(product),
        getIherbStoreList(product),
        getItemscoutStoreListV2(product),
      ]);
      if (iherbStoreData) return [...coupangStoreList, iherbStoreData, ...itemscoutStoreList];
      return [...coupangStoreList, ...itemscoutStoreList];
    }

    if (crawlingType === "naver") {
      const [coupangStoreList, naverStoreList] = await Promise.all([
        getCoupangStoreListV2(product),
        getNaverCatalogStoreListV2(product),
      ]);
      return [...coupangStoreList, ...naverStoreList];
    }
    return [];
  } catch (error) {
    l("Err", "red", (error as Error).message);
    return null;
  }
};

export const setStoreList = async (product: getAllProductIdType, storeList: StoreType[]) => {
  const dataToSend = {
    product,
    store_list: storeList,
  };

  const data: boolean = await axios
    .post(
      `${NODE_API_URL}/v${needOriginDataProductList.includes(product.product_id) ? 3 : 2}/crawling/store`,
      dataToSend
    )
    .then((res) => {
      if (res.data.message) l(`No Store`, "magenta", `MESSAGE product_id: ${product.product_id} ${res.data.message}`);
      return res.data.data;
    })
    .catch((e) => {
      l("Err ", "red", `setStoreList ${NODE_API_URL}/v2/crawling/store`);
      return null;
    });
  return data;
};

const needOriginDataProductList = [
  7, 9, 11, 14, 19, 34, 47, 55, 57, 59, 60, 63, 65, 70, 71, 82, 87, 88, 90, 96, 106, 116, 121, 122, 123, 125, 132, 138,
  144, 151, 153, 156, 159, 161, 163, 192, 211, 218, 242, 243, 250, 271, 279, 328, 350, 353, 370, 371, 374, 387, 429,
  436, 463, 501, 516, 561, 639, 663, 676, 683, 694, 718, 721, 801, 809, 822, 859, 870, 914, 924, 947, 988, 993, 999,
  1022, 1034, 1046, 1057, 1058, 1150, 1178, 1201, 1234, 2027, 2044, 2179, 2216, 2304, 2453, 2579, 2666, 2669, 2747,
  2775, 2782, 2794, 2962, 2989, 3066, 3072, 3115, 3122, 3248, 3264, 3294, 3295, 3298, 3318, 3368, 3375, 3601, 3627,
  3818, 3851, 3980, 4047, 4075, 4196, 4326, 4394, 4431, 4446, 4488, 4493, 4678, 4701, 4767, 4844, 4848, 4850, 4877,
  5127, 5237, 5253, 5279, 5466, 5515, 5521, 5701, 5716, 5729, 5735, 5755, 6061, 6312, 6391, 6555, 6591, 6592, 6654,
  6777, 6885, 7374, 7423, 7782, 7962, 8002, 8037, 8189, 8207, 8255, 8302, 8668, 8683, 8687, 8696, 8721, 8723, 8729,
  8917, 8935, 9041, 9071, 9112, 9120, 9225, 9226, 9298, 9305, 9441, 9862, 10149, 10278, 10352, 10353, 10693, 10917,
  11210, 11233, 11507, 11596, 11721, 12096, 12295, 12815, 13289, 13355, 13681, 14557, 14589, 14678, 14698, 15080, 15081,
  15331, 15547, 15701, 15703, 15842, 16068, 16477, 16595, 17216, 17618, 18098, 18104, 18241, 19243, 19382, 19568, 19657,
  19698, 20681, 20817, 20927, 20945, 21066, 21262, 21283, 21661, 21732, 21775, 23753, 23754, 24169, 24440, 25028, 25182,
  25218, 25512, 26785, 27046, 28635, 29686, 34090, 34094, 34106, 35210, 36589, 38519, 40852, 43076, 57791, 57792, 57794,
  57795, 57796, 57799, 57809, 57824, 57833, 57840, 57847, 57863, 57864, 57865, 57872, 57875, 57876, 57878, 57880, 57882,
  60668, 60671, 60793, 60797, 60798, 60800, 60801, 60809, 60810, 60811, 60817, 60820, 60825, 60828, 60830, 60832, 60833,
  60845, 60846, 60856, 60858, 60861, 60862, 60871, 60874, 60880, 60888, 60895, 60903, 60906, 60909, 60910, 60912, 60920,
  60926, 60927, 60933, 60938, 60940, 61061, 61074, 61076, 61077, 61107, 61113, 61158, 61179, 61194, 61202, 61223, 61225,
  61231, 61240, 61245, 61246, 61247, 61261, 61262, 61264, 61266, 61268, 61274, 61275, 61281, 61296, 61368, 61369, 61370,
  61372, 61373, 61375, 61376, 61377, 61379, 61380, 61382, 61384, 61385, 61388, 61389, 61390, 61391, 61392, 61393, 61395,
  61397, 61403, 61413, 61417, 61421, 61443, 61483, 61557, 61559, 61561, 61562, 61564, 61572, 61575, 61580, 61585, 61587,
  61589, 61590, 61591, 61613, 61616, 61635, 61649, 61653, 61663, 61666, 61681, 61697, 61870, 61905, 61907, 61908, 61909,
  61928, 61931, 61952, 61954, 61958, 61970, 62420, 62421, 62422, 62423, 62424, 62427, 62428, 62429, 62437, 62440, 62452,
  62457, 62462, 62480, 62493, 62494, 62519, 62522, 62537, 62551, 62589, 62733, 62773, 62823, 62847, 62893, 62896, 62914,
  62915, 62921, 62928, 62929, 62930, 62943, 62945, 62949, 62950, 62951, 62954, 62975, 62976, 62979, 62980, 62989, 62991,
  63021, 63026, 63027, 63036, 63038, 63040, 63045, 63122, 63123, 63126, 63128, 63130, 63131, 63132, 63134, 63135, 63139,
  63142, 63143, 63145, 63157, 63179, 63195, 63209, 63273, 63293, 66374, 66397, 66398, 66400, 66402, 66403, 66404, 66405,
  66409, 66414, 66415, 66417, 66419, 66422, 66503, 66536, 66550, 66553, 66554, 66555, 66560, 66679, 66700, 66846, 66847,
  66849, 66851, 66854, 66865, 66880, 66939, 66940, 66941, 66942, 66943, 66944, 66945, 66947, 67111, 67126, 70004, 70005,
  70010, 70011, 70021, 70030, 70031, 70038, 70052, 70054, 70059, 70065, 70066, 70067, 70070, 70090, 70093, 70100, 70103,
  70104, 70110, 70117, 70138, 70142, 70145, 70150, 70153, 70154, 70159, 70160, 70162, 70164, 70165, 70179, 70180, 70184,
  70194, 70208, 70209, 70218, 70228, 70240, 70244, 70274, 70276, 70281, 70282, 70285, 70304, 70309, 70315, 70323, 70332,
  70336, 70347, 70348, 70350, 70354, 70355, 70356, 70357, 70360, 70361, 70365, 70367, 70378, 70393, 70399, 70405, 70410,
  70419, 70438, 70439, 70441, 70443, 70449, 70451, 70452, 70453, 70465, 70467, 70470, 70471, 70473, 70475, 70486, 70487,
  70492, 70499, 70510, 70515, 70526, 70527, 70530, 70540, 70543, 70545, 70547, 70553, 70559, 70560, 70562, 70568, 70574,
  70575, 70579, 70582, 70585, 70600, 70601, 70602, 70603, 70607, 70610, 70621, 70629, 70638, 70640, 70641, 70643, 70647,
  70648, 70650, 70652, 70660, 70664, 70665, 70669, 70672, 70673, 70694, 70696, 70747, 70756, 70808, 70809, 70833, 70866,
  70931, 70939, 70997, 71001, 71023, 71078, 71149, 71185, 71197, 71220, 71246, 71274, 71307, 71328, 71393, 71435, 71462,
  71490, 71500, 71522, 71571, 71594, 71615, 71618, 71746, 71748, 71766, 71812, 71818, 71892, 71897, 71944, 71976, 72093,
  72110, 72112, 72116, 72177, 72212, 72356, 72485, 72541, 72610, 72667, 72669, 72670, 72712, 72724, 72736, 72762, 72769,
  72797, 72847, 72922, 72935, 73012, 73016, 73144, 73308, 73412, 73439, 73627, 73822, 73833, 73876, 73937, 73999, 74109,
  74150, 74268, 74403, 74420, 74423, 74515, 74606, 74713, 74862, 74891, 74961, 74971, 75061, 75199, 75277, 75314, 75396,
  75506, 75565, 75595, 75726, 75733, 75800, 75990, 75994, 76060, 76126, 76194, 76305, 76363, 76414, 76485, 76681, 76724,
  76885, 77087, 77340, 77393, 77406, 77433, 77624, 77812, 77992, 78123, 78142, 78210, 78267, 78297, 78382, 78589, 78622,
  78915, 79042, 79435, 79856, 80223, 80686, 81161, 81532, 81604, 82112, 83395, 83437, 84154, 84217, 84419, 84756, 85029,
  85080, 85120, 85131, 85157, 85209, 85216, 85232, 85241, 85244, 85646, 85674, 85695, 85737, 85741, 85927, 85931, 86060,
  86122, 86146, 86331, 86453, 86454, 86512, 86548, 86843, 86865, 86910, 87070, 87098, 87390, 87526, 87546, 87563, 87977,
  88087, 88090, 88192, 88311, 88313, 88431, 88513, 88526, 88623, 88626, 88921, 88929, 89019, 89060, 89136, 89351, 89358,
  89526, 89594, 89604, 89921, 90017, 90058, 90117, 90215, 90408, 90459, 90676, 90823, 90836, 90989, 91131, 91321, 91344,
  91409, 91428, 91430, 91437, 91474, 91552, 91627, 91680, 91704, 92158,
];
